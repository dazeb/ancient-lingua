generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id                String   @id @default(uuid())
  name              String
  language          String
  dates             String?
  bio               String?
  detailedBio       String?  @db.Text
  imageUrl          String?
  imageAttribution  String?
  imageLicense      String?
  imageSource       String?
  origin            String?
  tags              String[]
  notableFor        String?
  significance    String?  @db.Text
  relatedAuthors  Json?
  furtherReading  Json?
  onlineTexts     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  works           Work[]
  timeline        TimelineEvent[]
  quotes          Quote[]
  bookmarks       UserBookmark[]
  readingHistory  ReadingHistory[]

  @@map("authors")
}

model Work {
  id          String   @id @default(uuid())
  authorId    String
  title       String
  date        String?
  description String?  @db.Text
  keyThemes   String[]
  createdAt   DateTime @default(now())
  
  author      Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("author_works")
}

model TimelineEvent {
  id          String   @id @default(uuid())
  authorId    String
  date        String
  description String
  createdAt   DateTime @default(now())
  
  author      Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("author_timeline")
}

model Quote {
  id        String   @id @default(uuid())
  authorId  String
  text      String   @db.Text
  source    String?
  createdAt DateTime @default(now())
  
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("author_quotes")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  fullName      String?
  role          String    @default("user")
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  preferences    UserPreference?
  bookmarks      UserBookmark[]
  readingHistory ReadingHistory[]

  @@map("users")
}

model UserPreference {
  id                  String    @id @default(uuid())
  userId              String    @unique
  preferredLanguages  String[]
  theme               String    @default("light")
  notificationSettings Json     @default("{}")
  lastLogin           DateTime?
  updatedAt           DateTime  @updatedAt
  
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserBookmark {
  id        String   @id @default(uuid())
  userId    String
  authorId  String
  notes     String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([userId, authorId])
  @@map("user_bookmarks")
}

model ReadingHistory {
  id        String   @id @default(uuid())
  userId    String
  authorId  String
  visitedAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("reading_history")
}
